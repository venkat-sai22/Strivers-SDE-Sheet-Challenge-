class Solution {
    public int trap(int[] height) {
       /*int n=height.length;
        int trappedrainwater=0;
        int left[]=new int[n];
        left[0]=height[0];
        for(int i=1;i<n;i++)
        {
            left[i]=Math.max(height[i],left[i-1]);
        }
        int right[]=new int[n];
        right[n-1]=height[n-1];
        for(int i=n-2;i>=0;i--)
        {
            right[i]=Math.max(height[i],right[i+1]);
        }
        int waterlev=0;
        for(int i=0;i<n;i++)
        {
            waterlev=Math.min(left[i],right[i]);
            trappedrainwater+=waterlev-height[i];
        }
        return trappedrainwater;
        */int n=height.length;
        int left=0,right=n-1;
        int res=0;
        int maxleft=0,maxright=0;
        
        while(left<=right)
        {
            if(height[left]<=height[right])
            {
                if(height[left]>=maxleft)maxleft=height[left];
                else res+=maxleft-height[left];
                left++;
            }
            else
            {
                if(height[right]>=maxright)maxright=height[right];
                else res+=maxright-height[right];
                right--;
            }
        }
        return res;
        
        
    }
}